{"version":3,"sources":["App.tsx","index.tsx"],"names":["Sort","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","name","sort","prod1","prod2","localeCompare","length","product1","product2","reverse","getPreparedGoods","isChanged","className","type","cn","onClick","prevIsReversed","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,iBAAAA,M,KA+BE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAoB,IAAtD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAzBR,SAA0BC,EAA1B,GACoD,IAAhDL,EAA+C,EAA/CA,UAAWE,EAAoC,EAApCA,WACPI,EAAa,YAAOD,GAY1B,OAVIL,IAAcJ,EAAKW,MACrBD,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAGvDV,IAAcJ,EAAKgB,QACrBN,EAAcE,MACZ,SAACK,EAAUC,GAAX,OAAwBD,EAASD,OAASE,EAASF,UAInDV,EACKI,EAAcS,UAGhBT,EAOcU,CAAiBnB,EAAiB,CACrDG,YACAE,eAGIe,EAA0B,KAAdjB,GAAoBE,EAOtC,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,CAAE,WAAYpB,IAAcJ,EAAKW,MACjC,kBAEFc,QAAS,WACPpB,EAAaL,EAAKW,OAPtB,iCAaA,wBACEY,KAAK,SACLD,UAAWE,IACT,CAAE,WAAYpB,IAAcJ,EAAKgB,QACjC,qBAEFS,QAAS,WACPpB,EAAaL,EAAKgB,SAPtB,4BAaA,wBACEO,KAAK,SACLD,UAAWE,IACT,CAAE,YAA2B,IAAflB,GACd,qBAEFmB,QAAS,WACPlB,GAAc,SAACmB,GAAD,OAAqBA,MAPvC,qBAaCL,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAnDM,WACdpB,EAAa,IACbE,GAAc,IA8CR,sBAUJ,6BACGC,EAAamB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCrHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7b8768a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum Sort {\n  name = 'name',\n  length = 'length',\n}\n\ninterface SortParams {\n  sortField: Sort | '';\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(goods: string[],\n  { sortField, isReversed }: SortParams): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField === Sort.name) {\n    preparedGoods.sort((prod1, prod2) => prod1.localeCompare(prod2));\n  }\n\n  if (sortField === Sort.length) {\n    preparedGoods.sort(\n      (product1, product2) => product1.length - product2.length,\n    );\n  }\n\n  if (isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<Sort | ''>('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  const isChanged = sortField !== '' || isReversed;\n\n  const onReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            { 'is-light': sortField !== Sort.name },\n            'button is-info',\n          )}\n          onClick={() => {\n            setSortField(Sort.name);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            { 'is-light': sortField !== Sort.length },\n            'button is-success',\n          )}\n          onClick={() => {\n            setSortField(Sort.length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            { 'is-light': isReversed === false },\n            'button is-warning',\n          )}\n          onClick={() => {\n            setIsReversed((prevIsReversed) => !prevIsReversed);\n          }}\n        >\n          Reverse\n        </button>\n\n        {isChanged && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={onReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((item) => (\n          <li data-cy=\"Good\" key={item}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}